# -*- indent-tabs-mode: true, mode: Makefile -*-

PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_VERSION = @PACKAGE_VERSION@

# Tools
OCAMLFIND = @OCAMLFIND@
OCAMLC = @OCAMLC@
OCAMLOPT = @OCAMLOPT@
OCAMLMKLIB = @OCAMLMKLIB@
OF_INSTALL = $(OCAMLFIND) install
OF_REMOVE = $(OCAMLFIND) remove

# Configuration
CFLAGS += -Wall -O2
LIBS += -lyices

# Source files
ML_SOURCE = src/yices2.ml
MLI_SOURCE = src/yices2.mli
C_SOURCE = \
	src/contexts.c \
	src/terms.c \
	src/models.c \
	src/types.c \
	src/misc.c \
	src/pp_internals.c \
	src/utils.c

# Compiled files
C_OBJS = $(C_SOURCE:src/%.c=build/%.o)
ML_BYTE = $(ML_SOURCE:src/%.ml=build/%.cmo)
ML_NATIVE = $(ML_SOURCE:src/%.ml=build/%.cmx)
MLI_FILES = $(MLI_SOURCE:src/%.mli=build/%.cmi)


DIST_FILES := META $(MLI_FILES) \
	build/$(PACKAGE_NAME).cma build/lib$(PACKAGE_NAME).a build/$(PACKAGE_NAME).a

ifneq ($(OCAMLOPT),)
DIST_FILES += build/$(PACKAGE_NAME).cmxa
endif

DLL_FILE = build/dll$(PACKAGE_NAME).so

all: build

build: build/$(PACKAGE_NAME).cma build/$(PACKAGE_NAME).cmxa

# Generic compilation rules ####################################################

build/%.o: src/%.c
	@mkdir -p $(dir $@)
	$(OCAMLC) $(CFLAGS:%=-ccopt %) -ccopt -o -ccopt $@ $< 
build/%.cmi: src/%.mli
	@mkdir -p $(dir $@)
	$(OCAMLC) -I build -c -o $@ $<
build/%.cmo: src/%.ml
	@mkdir -p $(dir $@)
	$(OCAMLC) -I build -c -o $@ $<
build/%.cmx: src/%.ml 
	@mkdir -p $(dir $@)
	$(OCAMLOPT) -I build -c -o $@ $<

# Dependencies #################################################################

build/yices2.cmo build/yices2.cmx: build/yices2.cmi

build/contexts.o build/terms.o build/models.o build/types.o build/misc.o build/pp_internals.o: src/ocamlyices2.h
build/ocamlyices2_terms.o: src/terms_macros.h


# Library compilation ##########################################################

build/$(PACKAGE_NAME).cma: $(C_OBJS) $(ML_BYTE)
	$(OCAMLMKLIB) -o $(@:.cma=) $^ $(LIBS)
build/$(PACKAGE_NAME).cmxa: $(C_OBJS) $(ML_NATIVE)
	$(OCAMLMKLIB) -o $(@:.cmxa=) $^ $(LIBS)

# (Un)Install ##################################################################
install: build
	$(OF_INSTALL) $(PACKAGE_NAME) $(DIST_FILES) -dll $(DLL_FILE)
uninstall:
	$(OF_REMOVE) $(PACKAGE_NAME)

# Clean up #####################################################################
clean:
	rm -rf build *.o *.[aos] *.cm[aoxi] *.cmxa *.so a.out .depend

.PHONY: all build install uninstall clean test

test: build
	@cd tests; for testfile in *.ml; do\
		if ocaml -I ../build/ ../build/ocamlyices2.cma $$testfile ; then\
			echo "test '$${testfile%.ml}' passed";\
		else\
			echo "test '$${testfile%.ml}' failed";\
		fi;\
	done

# vim:noet:
